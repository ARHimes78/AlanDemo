/*
 * AlanDemo.java
 *
 * Created on 30. Juli 2008, 16:18
 */

package org.alan;

import org.alan.moreFrames.ArrowPanel;
import org.alan.moreFrames.ColorSliders;
import com.sun.opengl.util.Animator;
import com.sun.opengl.util.FPSAnimator;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author cylab
 * @author mbien
 */
public class AlanDemo extends JFrame {

    static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
       
    public static final int FPS = 30; // Frames per second
    private Animator animator;

    public int demo = 1;
    public int rotateX = 0;
    public int rotateY = 0;
    public int frames = 0;
    public float secs = 0;
    
    private GLRenderer renderer;
    private ArrowPanel arrowPanel;
    public ColorSliders colorSliders;

    /** Creates new form MainFrame */
    public AlanDemo() {
        initComponents();
        setTitle("Alan Demo");
        
        rYLabel.setText(Integer.toString(rotateY));

        arrowPanel = new ArrowPanel(this);
        colorSliders = new ColorSliders(arrowPanel);
        
        canvas.addGLEventListener(new GLRenderer(this));
        animator = new FPSAnimator(canvas, FPS);
        animator.start();

        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());
        
        
        
        arrowPanel = new ArrowPanel(this);
        colorSliders = new ColorSliders(arrowPanel);
        
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
        
    }

    @Override
    public void setVisible(boolean show){
        if(!show)
            animator.stop();
        super.setVisible(show);
        if(!show)
            animator.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        demoButtonGroup = new ButtonGroup();
        JLabel label = new JLabel();
        canvas = new GLCanvas(createGLCapabilites());
        rotateYSlider = new JSlider();
        jLabel1 = new JLabel();
        rYLabel = new JLabel();
        jLabel2 = new JLabel();
        demo2RadioButton = new JRadioButton();
        demo3RadioButton = new JRadioButton();
        demo4RadioButton = new JRadioButton();
        demo5RadioButton = new JRadioButton();
        demo2RadioButton1 = new JRadioButton();
        demo6RadioButton = new JRadioButton();
        rXLabel = new JLabel();
        jLabel3 = new JLabel();
        rotateXSlider = new JSlider();
        secLabel = new JLabel();
        jLabel5 = new JLabel();
        demo7RadioButton = new JRadioButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(1082, 788));
        setResizable(false);
        setSize(new Dimension(1082, 788));

        label.setText("Below you see a GLCanvas");

        canvas.setName(""); // NOI18N
        canvas.setRealized(false);

        rotateYSlider.setMaximum(90);
        rotateYSlider.setMinimum(-90);
        rotateYSlider.setValue(0);
        rotateYSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                rotateYSliderStateChanged(evt);
            }
        });

        jLabel1.setText("Rotate Y");

        rYLabel.setText("val");

        jLabel2.setText("Demo");

        demoButtonGroup.add(demo2RadioButton);
        demo2RadioButton.setText("2");
        demo2RadioButton.setRolloverEnabled(false);
        demo2RadioButton.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                demo2RadioButtonStateChanged(evt);
            }
        });
        demo2RadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                demo2RadioButtonActionPerformed(evt);
            }
        });

        demoButtonGroup.add(demo3RadioButton);
        demo3RadioButton.setText("3");
        demo3RadioButton.setRolloverEnabled(false);
        demo3RadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                demo3RadioButtonActionPerformed(evt);
            }
        });

        demoButtonGroup.add(demo4RadioButton);
        demo4RadioButton.setText("4");
        demo4RadioButton.setRolloverEnabled(false);
        demo4RadioButton.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                demo4RadioButtonStateChanged(evt);
            }
        });
        demo4RadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                demo4RadioButtonActionPerformed(evt);
            }
        });

        demoButtonGroup.add(demo5RadioButton);
        demo5RadioButton.setText("5");
        demo5RadioButton.setRolloverEnabled(false);
        demo5RadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                demo5RadioButtonActionPerformed(evt);
            }
        });

        demoButtonGroup.add(demo2RadioButton1);
        demo2RadioButton1.setSelected(true);
        demo2RadioButton1.setText("1");
        demo2RadioButton1.setRolloverEnabled(false);
        demo2RadioButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                demo1RadioButtonActionPerformed(evt);
            }
        });

        demoButtonGroup.add(demo6RadioButton);
        demo6RadioButton.setText("6");
        demo6RadioButton.setRolloverEnabled(false);
        demo6RadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                demo6RadioButtonActionPerformed(evt);
            }
        });

        rXLabel.setText("val");

        jLabel3.setText("Rotate X");

        rotateXSlider.setMaximum(90);
        rotateXSlider.setMinimum(-90);
        rotateXSlider.setValue(0);
        rotateXSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                rotateXSliderStateChanged(evt);
            }
        });

        secLabel.setText("sec");

        jLabel5.setText("secs");

        demoButtonGroup.add(demo7RadioButton);
        demo7RadioButton.setText("7");
        demo7RadioButton.setRolloverEnabled(false);
        demo7RadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                demo7RadioButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(rotateXSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rXLabel)
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(rotateYSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rYLabel)
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(label))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(canvas, GroupLayout.PREFERRED_SIZE, 1029, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(demo2RadioButton1)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(demo2RadioButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(demo3RadioButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(demo4RadioButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(demo5RadioButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(demo6RadioButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(demo7RadioButton)
                        .addGap(32, 32, 32)
                        .addComponent(secLabel)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(canvas, GroupLayout.PREFERRED_SIZE, 533, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(rotateXSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(rXLabel)
                    .addComponent(rotateYSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(rYLabel))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(demo2RadioButton)
                    .addComponent(demo3RadioButton)
                    .addComponent(demo4RadioButton)
                    .addComponent(demo5RadioButton)
                    .addComponent(demo2RadioButton1)
                    .addComponent(demo6RadioButton)
                    .addComponent(secLabel)
                    .addComponent(jLabel5)
                    .addComponent(demo7RadioButton))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rotateYSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rotateYSliderStateChanged
        JSlider source = (JSlider) evt.getSource();
        if (!source.getValueIsAdjusting()) {
            rotateY = source.getValue();
        }
        rYLabel.setText(Integer.toString(rotateY));
        canvas.repaint();
    }//GEN-LAST:event_rotateYSliderStateChanged

    private void demo1RadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_demo1RadioButtonActionPerformed
        demo=1;
        canvas.repaint();
    }//GEN-LAST:event_demo1RadioButtonActionPerformed

    private void demo2RadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_demo2RadioButtonActionPerformed
        demo=2;
        canvas.repaint();
    }//GEN-LAST:event_demo2RadioButtonActionPerformed

    private void demo3RadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_demo3RadioButtonActionPerformed
        demo=3;
        canvas.repaint();
    }//GEN-LAST:event_demo3RadioButtonActionPerformed

    private void demo4RadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_demo4RadioButtonActionPerformed
        demo=4;
        canvas.repaint();
    }//GEN-LAST:event_demo4RadioButtonActionPerformed

    private void demo5RadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_demo5RadioButtonActionPerformed
        demo=5;
        canvas.repaint();
    }//GEN-LAST:event_demo5RadioButtonActionPerformed

    private void demo6RadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_demo6RadioButtonActionPerformed
        demo=6;
        canvas.repaint();
    }//GEN-LAST:event_demo6RadioButtonActionPerformed

    private void rotateXSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rotateXSliderStateChanged
        JSlider source = (JSlider) evt.getSource();
        if (!source.getValueIsAdjusting()) {
            rotateX = source.getValue();
        }
        rXLabel.setText(Integer.toString(rotateX));
        canvas.repaint();
    }//GEN-LAST:event_rotateXSliderStateChanged

    private void demo7RadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_demo7RadioButtonActionPerformed
        demo=7;
        canvas.repaint();
    }//GEN-LAST:event_demo7RadioButtonActionPerformed

    private void demo2RadioButtonStateChanged(ChangeEvent evt) {//GEN-FIRST:event_demo2RadioButtonStateChanged
        arrowPanel.setVisible(demo2RadioButton.isSelected());
        arrowPanel.reset();
        arrowPanel.getChkBoxColors().setSelected(false);

    }//GEN-LAST:event_demo2RadioButtonStateChanged

    private void demo4RadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_demo4RadioButtonStateChanged
        renderer.resetAnimFrames();
    }//GEN-LAST:event_demo4RadioButtonStateChanged

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {
        
        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);
        
        return capabilities;
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {
            public void run() {

                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                AlanDemo frame = new AlanDemo();
                frame.setVisible(true);
            }
        });
    }
    
    public void setSecs(float secs){
        this.secs = secs;
        secLabel.setText(Integer.toString((int)secs));
    }
    
    public GLRenderer getRenderer() {
        return renderer;
    }

    public void setRenderer(GLRenderer renderer) {
        this.renderer = renderer;
    }
    
    public ColorSliders getColorSliders() {
        return colorSliders;
    }

    public void setColorSliders(ColorSliders colorSliders) {
        this.colorSliders = colorSliders;
    }

    public GLCanvas getCanvas() {
        return canvas;
    }

    public void setCanvas(GLCanvas canvas) {
        this.canvas = canvas;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GLCanvas canvas;
    private JRadioButton demo2RadioButton;
    private JRadioButton demo2RadioButton1;
    private JRadioButton demo3RadioButton;
    private JRadioButton demo4RadioButton;
    private JRadioButton demo5RadioButton;
    private JRadioButton demo6RadioButton;
    private JRadioButton demo7RadioButton;
    private ButtonGroup demoButtonGroup;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel5;
    private JLabel rXLabel;
    private JLabel rYLabel;
    private JSlider rotateXSlider;
    private JSlider rotateYSlider;
    private JLabel secLabel;
    // End of variables declaration//GEN-END:variables

}
